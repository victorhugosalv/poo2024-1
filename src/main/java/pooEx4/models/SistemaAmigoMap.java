package pooEx4.models;import pooEx4.entities.Amigo;import pooEx4.entities.Mensagem;import pooEx4.entities.MensagemParaAlguem;import pooEx4.entities.MensagemParaTodos;import pooEx4.exceptions.AmigoInexistenteException;import pooEx4.exceptions.AmigoNaoSorteadoException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.stream.Collectors;public class SistemaAmigoMap {    private List<Mensagem> mensagens;    private Map<String, Amigo> amigos;    public SistemaAmigoMap() {        this.mensagens = new ArrayList<Mensagem>();        this.amigos = new HashMap<String, Amigo>();    }    public void cadastraAmigo(String nomeAmigo, String emailAmigo){        amigos.put(emailAmigo, new Amigo(nomeAmigo,emailAmigo));    }    public Amigo pesquisaAmigo(String emailAmigo){        if(amigos.containsKey(emailAmigo))            return amigos.get(emailAmigo);        throw new AmigoInexistenteException("Não existe esse amigo");    }    public void enviarMensagemParaTodos(String texto, String emailRemetente, boolean ehAnonima) {        mensagens.add(new MensagemParaTodos(texto, emailRemetente, ehAnonima));    }    public void enviarMensagemParaAlguem(String texto, String emailRemetente, boolean ehAnonimo, String emailDestinatario){        mensagens.add(new MensagemParaAlguem(texto, emailDestinatario, ehAnonimo, emailRemetente));    }    public List<Mensagem> pesquisaMensagensAnonimas(){        List<Mensagem> mensagensAnonimas = mensagens.stream().filter(Mensagem::ehAnonima).collect(Collectors.toList());        return mensagensAnonimas;    }    public List<Mensagem> pesquisaTodasAsMensagens(){        return mensagens;    }    public void configuraAmigoSecretoDe(String emailDaPessoa, String emailAmigoSorteado){        pesquisaAmigo(emailDaPessoa).setEmailAmigoSorteado(emailAmigoSorteado);    }    public String pesquisaAmigoSecretoDe(String emailDaPessoa) throws AmigoInexistenteException, AmigoNaoSorteadoException {        Amigo amigo = pesquisaAmigo(emailDaPessoa);        try {            if(amigo == null)                throw new AmigoInexistenteException("Nao encontrmaos esse amigo!");            try{                if (amigo.getEmailAmigoSorteado() == null){                    throw new AmigoNaoSorteadoException("Este amigo ainda não tem amigos sorteados.");                }            } catch (AmigoNaoSorteadoException i){                System.err.println(i.getMessage());            }        } catch (AmigoInexistenteException e) {            System.err.println(e.getMessage());        }        return amigo.getEmailAmigoSorteado();    }}