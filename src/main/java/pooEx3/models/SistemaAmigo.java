package pooEx3.models;import pooEx3.entities.Amigo;import pooEx3.entities.Mensagem;import pooEx3.entities.MensagemParaAlguem;import pooEx3.entities.MensagemParaTodos;import pooEx3.exceptions.AmigoInexistenteException;import java.util.ArrayList;import java.util.List;import java.util.stream.Collectors;public class SistemaAmigo {    private List<Mensagem> mensagens;    private List<Amigo> amigos;    public SistemaAmigo() {        this.mensagens = new ArrayList<Mensagem>();        this.amigos = new ArrayList<Amigo>();    }    public void cadastraAmigo(String nomeAmigo, String emailAmigo){        amigos.add(new Amigo(nomeAmigo,emailAmigo));    }    public Amigo pesquisaAmigo(String emailAmigo){        return amigos.stream().filter(amigo -> amigo.getEmail().equals(emailAmigo)).findFirst().orElse(null);    }    public void enviarMensagemParaTodos(String texto, String emailRemetente, boolean ehAnonima) {        mensagens.add(new MensagemParaTodos(texto, emailRemetente, ehAnonima));    }    public void enviarMensagemParaAlguem(String texto, String emailRemetente, boolean ehAnonimo, String emailDestinatario){        mensagens.add(new MensagemParaAlguem(texto, emailDestinatario, ehAnonimo, emailRemetente));    }    public List<Mensagem> pesquisaMensagensAnonimas(){        List<Mensagem> mensagensAnonimas = mensagens.stream().filter(Mensagem::ehAnonima).collect(Collectors.toList());        return mensagensAnonimas;    }    public List<Mensagem> pesquisaTodasAsMensagens(){        return mensagens;    }    public void configuraAmigoSecretoDe(String emailDaPessoa, String emailAmigoSorteado){        pesquisaAmigo(emailDaPessoa).setEmailAmigoSorteado(emailAmigoSorteado);    }    public String pesquisaAmigoSecretoDe(String emailDaPessoa) throws AmigoInexistenteException, AmigoNaoSorteadoException{        Amigo amigo = pesquisaAmigo(emailDaPessoa);        try {            if(amigo == null)                throw new AmigoInexistenteException("Nao encontrmaos esse amigo!");            try{                if (amigo.getEmailAmigoSorteado() == null){                    throw new AmigoNaoSorteadoException("Este amigo ainda n√£o tem amigos sorteados.");                }            } catch (AmigoNaoSorteadoException i){                System.err.println(i.getMessage());            }        } catch (AmigoInexistenteException e) {            System.err.println(e.getMessage());        }        return amigo.getEmailAmigoSorteado();    }}